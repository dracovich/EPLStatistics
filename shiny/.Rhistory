dateShort$Date<-as.Date(dateShort$Date, "%d/%m/%y")
dateLong$Date<-as.Date(dateLong$Date, "%d/%m/%Y")
data<-rbind(dateShort,dateLong)
## Define home and away discipline points (HDP and ADP respectively), 10points for yellow, 25 for red.
data$ADP<-data$AY*10+data$AR*25
data$HDP<-data$HY*10+data$HR*25
## Incomplete dataset, missing half of 12-13 and nothing after that
seasons_wanted<-c("00-01",
"01-02",
"02-03",
"03-04",
"04-05",
"05-06",
"06-07",
"07-08",
"08-09",
"09-10",
"10-11",
"11-12",
"12-13",
"13-14",
"14-15")
selection_row<-data$season %in% seasons_wanted
data<-cbind(data,selection_row)
## Select the relevant seasons, and premier league (E0) only
data<-subset(data,selection_row==TRUE)
## Need to rename since "AS" messes with the SQL syntax if its a variable name.
data<-rename(data,c("AS"="AwayShots", "HS"="HomeShots"))
library(zoo)
library(sqldf)
library(plyr)
library(reshape2)
library(ggplot2)
## Load the cleanup functions
source(file="teamCleanup.R")
source(file="teamMerge.R")
source(file="teamStanding.R")
source(file="tableStanding.R")
## Download and clean data, only if this is first time running
## source("data-cleaning.R")
## Load the edited file and define the colClasses
col<-c("factor",rep("character",4),rep("numeric",2),"factor",rep("numeric",15))
data<-read.csv("all_seasons.csv", colClasses=col)
## We have to reformat the date variable from a string to a date
## Upon looking at data however, we see that tehre are two formats in data, so we need to split data first
## Then format, and subsequently rejoin them with the same date format
dateLengthLong<-nchar(as.character(data$Date))>8
dateLengthShort<-nchar(as.character(data$Date))<=8
dateLong<-data[dateLengthLong,]
dateShort<-data[dateLengthShort,]
dateShort$Date<-as.Date(dateShort$Date, "%d/%m/%y")
dateLong$Date<-as.Date(dateLong$Date, "%d/%m/%Y")
data<-rbind(dateShort,dateLong)
## Define home and away discipline points (HDP and ADP respectively), 10points for yellow, 25 for red.
data$ADP<-data$AY*10+data$AR*25
data$HDP<-data$HY*10+data$HR*25
## Incomplete dataset, missing half of 12-13 and nothing after that
seasons_wanted<-c("00-01",
"01-02",
"02-03",
"03-04",
"04-05",
"05-06",
"06-07",
"07-08",
"08-09",
"09-10",
"10-11",
"11-12",
"12-13",
"13-14",
"14-15")
selection_row<-data$season %in% seasons_wanted
data<-cbind(data,selection_row)
## Select the relevant seasons, and premier league (E0) only
data<-subset(data,selection_row==TRUE)
## Need to rename since "AS" messes with the SQL syntax if its a variable name.
data<-rename(data,c("AS"="AwayShots", "HS"="HomeShots"))
## We cycle through all games in all seasons, and create a rolling mean of the previous
## 3 games for all variables, in order to get predictive variables.
for(k in seasons_wanted){
season_subset<-subset(data,season==k)
teams<-unique(season_subset$HomeTeam)
for (i in teams){
team_subset<-subset(season_subset,(HomeTeam==i | AwayTeam==i))
## Run the cleanup on data for team i
team_cleaned<-teamCleanup(i,team_subset)
## If it's the first team, initiate the data-frame, if not just append it
if(i==teams[1]){
combined<-team_cleaned
} else {
combined<-rbind(combined,team_cleaned)
}
}
cleanSeason<-season_subset[c(1,5,6,11)]
## Removing the first 5 games again (since they dont hvae rolling 5 data)
combinedClean<-as.data.frame(combined[complete.cases(combined$mGoals),])
## Calculate the standing of each team before each game measured (using previously defined functions)
indTeamStanding<-as.data.frame(apply(combinedClean[,c("season","Date","team")],1,function(x) teamStanding(x[1],x[2],x[3])))
names(indTeamStanding)[1]<-"standing"
combinedFinal<-cbind(combinedClean,indTeamStanding)
if(k==seasons_wanted[1]){
totalCombined<-combinedFinal
} else {
totalCombined<-rbind(totalCombined,combinedFinal)
}
}
for (i in teams){
team_subset<-subset(season_subset,(HomeTeam==i | AwayTeam==i))
## Run the cleanup on data for team i
team_cleaned<-teamCleanup(i,team_subset)
## If it's the first team, initiate the data-frame, if not just append it
if(i==teams[1]){
combined<-team_cleaned
} else {
combined<-rbind(combined,team_cleaned)
}
}
setwd("C:/Users/dracovich/Desktop/Data Science/Create data products")
library(zoo)
library(sqldf)
library(plyr)
library(reshape2)
library(ggplot2)
## Load the cleanup functions
source(file="teamCleanup.R")
source(file="teamMerge.R")
source(file="teamStanding.R")
source(file="tableStanding.R")
## Download and clean data, only if this is first time running
## source("data-cleaning.R")
## Load the edited file and define the colClasses
col<-c("factor",rep("character",4),rep("numeric",2),"factor",rep("numeric",15))
data<-read.csv("all_seasons.csv", colClasses=col)
## We have to reformat the date variable from a string to a date
## Upon looking at data however, we see that tehre are two formats in data, so we need to split data first
## Then format, and subsequently rejoin them with the same date format
dateLengthLong<-nchar(as.character(data$Date))>8
dateLengthShort<-nchar(as.character(data$Date))<=8
dateLong<-data[dateLengthLong,]
dateShort<-data[dateLengthShort,]
dateShort$Date<-as.Date(dateShort$Date, "%d/%m/%y")
dateLong$Date<-as.Date(dateLong$Date, "%d/%m/%Y")
data<-rbind(dateShort,dateLong)
## Define home and away discipline points (HDP and ADP respectively), 10points for yellow, 25 for red.
data$ADP<-data$AY*10+data$AR*25
data$HDP<-data$HY*10+data$HR*25
## Incomplete dataset, missing half of 12-13 and nothing after that
seasons_wanted<-c("00-01",
"01-02",
"02-03",
"03-04",
"04-05",
"05-06",
"06-07",
"07-08",
"08-09",
"09-10",
"10-11",
"11-12",
"12-13",
"13-14",
"14-15")
selection_row<-data$season %in% seasons_wanted
data<-cbind(data,selection_row)
## Select the relevant seasons, and premier league (E0) only
data<-subset(data,selection_row==TRUE)
## Need to rename since "AS" messes with the SQL syntax if its a variable name.
data<-rename(data,c("AS"="AwayShots", "HS"="HomeShots"))
## We cycle through all games in all seasons, and create a rolling mean of the previous
## 3 games for all variables, in order to get predictive variables.
for(k in seasons_wanted){
season_subset<-subset(data,season==k)
teams<-unique(season_subset$HomeTeam)
for (i in teams){
team_subset<-subset(season_subset,(HomeTeam==i | AwayTeam==i))
## Run the cleanup on data for team i
team_cleaned<-teamCleanup(i,team_subset)
## If it's the first team, initiate the data-frame, if not just append it
if(i==teams[1]){
combined<-team_cleaned
} else {
combined<-rbind(combined,team_cleaned)
}
}
cleanSeason<-season_subset[c(1,5,6,11)]
## Removing the first 5 games again (since they dont hvae rolling 5 data)
combinedClean<-as.data.frame(combined[complete.cases(combined$mGoals),])
## Calculate the standing of each team before each game measured (using previously defined functions)
indTeamStanding<-as.data.frame(apply(combinedClean[,c("season","Date","team")],1,function(x) teamStanding(x[1],x[2],x[3])))
names(indTeamStanding)[1]<-"standing"
combinedFinal<-cbind(combinedClean,indTeamStanding)
if(k==seasons_wanted[1]){
totalCombined<-combinedFinal
} else {
totalCombined<-rbind(totalCombined,combinedFinal)
}
}
for (i in teams){
team_subset<-subset(season_subset,(HomeTeam==i | AwayTeam==i))
## Run the cleanup on data for team i
team_cleaned<-teamCleanup(i,team_subset)
## If it's the first team, initiate the data-frame, if not just append it
if(i==teams[1]){
combined<-team_cleaned
} else {
combined<-rbind(combined,team_cleaned)
}
}
View(combined)
cleanSeason<-season_subset[c(1,5,6,11)]
combinedClean<-as.data.frame(combined[complete.cases(combined$mGoals),])
View(combinedClean)
indTeamStanding<-as.data.frame(apply(combinedClean[,c("season","Date","team")],1,function(x) teamStanding(x[1],x[2],x[3])))
combinedClean[,c("season","Date","team")]
indTeamStanding<-as.data.frame(apply(combinedClean[,c("season","Date","team")],1,function(x) teamStanding(x[1],x[2],x[3])))
View(combinedClean)
View(combinedClean)
View(combined)
teamStanding("00-02","2000-11-25","Charlton")
teamStanding("00-01","2000-11-25","Charlton")
View(combinedClean)
test<-combinedClean[order(Date)]
test<-combinedClean[order(Date),]
test<-combinedClean
test<-combinedClean[order(Date)]
test<-combinedClean[order(Date),]
test<-combinedClean[order(Date),]
View(combinedClean)
teamStanding("00-01","2000-11-18","Man United")
teamStanding("00-01","2000-08-23","Everton")
indTeamStanding<-as.data.frame(apply(combinedClean[,c("season","Date","team")],1,function(x) teamStanding(x[1],x[2],x[3])))
indTeamStanding<-as.data.frame(apply(combinedClean[,c("season","Date","team")],1,function(x) teamStanding(x[1],x[2],x[3])))
indTeamStanding<-as.data.frame(apply(combinedClean[,c("season","Date","team")],1,function(x) teamStanding(x[1],x[2],x[3])))
indTeamStanding<-as.data.frame(apply(combinedClean[,c("season","Date","team")],1,function(x) teamStanding(x[1],x[2],x[3])))
teamStanding("00-01","2000-08-19","Chelsea")
View(combined)
datatest<-data[order(Date),]
datatest<-data[order(X),]
datatest<-data[order(data$Date),]
View(datatest)
## We cycle through all games in all seasons, and create a rolling mean of the previous
## 3 games for all variables, in order to get predictive variables.
for(k in seasons_wanted){
season_subset<-subset(data,season==k)
teams<-unique(season_subset$HomeTeam)
for (i in teams){
team_subset<-subset(season_subset,(HomeTeam==i | AwayTeam==i))
## Run the cleanup on data for team i
team_cleaned<-teamCleanup(i,team_subset)
## If it's the first team, initiate the data-frame, if not just append it
if(i==teams[1]){
combined<-team_cleaned
} else {
combined<-rbind(combined,team_cleaned)
}
}
cleanSeason<-season_subset[c(1,5,6,11)]
## Removing the first 5 games again (since they dont hvae rolling 5 data)
combinedClean<-as.data.frame(combined[complete.cases(combined$mGoals),])
## Calculate the standing of each team before each game measured (using previously defined functions)
indTeamStanding<-as.data.frame(apply(combinedClean[,c("season","Date","team")],1,function(x) teamStanding(x[1],x[2],x[3])))
names(indTeamStanding)[1]<-"standing"
combinedFinal<-cbind(combinedClean,indTeamStanding)
if(k==seasons_wanted[1]){
totalCombined<-combinedFinal
} else {
totalCombined<-rbind(totalCombined,combinedFinal)
}
}
data<-data[order(data$Date),]
for(k in seasons_wanted){
season_subset<-subset(data,season==k)
teams<-unique(season_subset$HomeTeam)
for (i in teams){
team_subset<-subset(season_subset,(HomeTeam==i | AwayTeam==i))
## Run the cleanup on data for team i
team_cleaned<-teamCleanup(i,team_subset)
## If it's the first team, initiate the data-frame, if not just append it
if(i==teams[1]){
combined<-team_cleaned
} else {
combined<-rbind(combined,team_cleaned)
}
}
cleanSeason<-season_subset[c(1,5,6,11)]
## Removing the first 5 games again (since they dont hvae rolling 5 data)
combinedClean<-as.data.frame(combined[complete.cases(combined$mGoals),])
## Calculate the standing of each team before each game measured (using previously defined functions)
indTeamStanding<-as.data.frame(apply(combinedClean[,c("season","Date","team")],1,function(x) teamStanding(x[1],x[2],x[3])))
names(indTeamStanding)[1]<-"standing"
combinedFinal<-cbind(combinedClean,indTeamStanding)
if(k==seasons_wanted[1]){
totalCombined<-combinedFinal
} else {
totalCombined<-rbind(totalCombined,combinedFinal)
}
}
View(combinedClean)
View(combined)
View(team_subset)
View(season_subset)
team_subset<-subset(season_subset,(HomeTeam=="Charlton" | AwayTeam=="Charlton"))
View(team_subset)
i="Charlton"
team_cleaned<-teamCleanup(i,team_subset)
View(team_cleaned)
data<-team_subset
t=i
homeList<-data[data$HomeTeam==t,]
cleanHome<-homeList[c(1,2,3)]
cleanHome$team<-t
cleanHome$HomeAway<-"Home"
cleanHome$goals<-homeList$FTHG
cleanHome$shots<-homeList$HomeShots
cleanHome$shotsOnTarget<-homeList$HST
cleanHome$corners<-homeList$HC
cleanHome$fouls<-homeList$HF
cleanHome$yellows<-homeList$HY
cleanHome$DP<-homeList$HDP
cleanHome$reds<-homeList$HR
homeWins<-homeList[homeList$FTHG>homeList$FTAG,]
homeW<-homeWins[1]
if(nrow(homeW)>0){homeW$points<-3}
homeDraws<-homeList[homeList$FTHG==homeList$FTAG,]
homeD<-homeDraws[1]
if(nrow(homeD)>0){homeD$points<-1}
homeLosses<-homeList[homeList$FTHG<homeList$FTAG,]
homeL<-homeLosses[1]
if(nrow(homeL)>0){homeL$points<-0}
homePoints<-rbind(homeW,homeL,homeD)
finalHome<-merge(cleanHome,homePoints,by="X")
awayList<-data[data$AwayTeam==t,]
cleanAway<-awayList[c(1,2,3)]
cleanAway$team<-t
cleanAway$HomeAway<-"Away"
cleanAway$goals<-awayList$FTHG
cleanAway$shots<-awayList$HomeShots
cleanAway$shotsOnTarget<-awayList$HST
cleanAway$corners<-awayList$HC
cleanAway$fouls<-awayList$HF
cleanAway$yellows<-awayList$HY
cleanAway$DP<-awayList$ADP
cleanAway$reds<-awayList$HR
awayWins<-awayList[awayList$FTHG<awayList$FTAG,]
awayW<-awayWins[1]
if(nrow(awayW)>0){awayW$points<-3}
awayDraws<-awayList[awayList$FTHG==awayList$FTAG,]
awayD<-awayDraws[1]
if(nrow(awayD)>0){awayD$points<-1}
awayLosses<-awayList[awayList$FTHG>awayList$FTAG,]
awayL<-awayLosses[1]
if(nrow(awayL)>0){awayL$points<-0}
awayPoints<-rbind(awayW,awayL,awayD)
finalAway<-merge(cleanAway,awayPoints,by="X")
combined<-rbind(finalHome,finalAway)
clean<-combined[order(combined$X),]
View(clean)
col<-c("factor",rep("character",4),rep("numeric",2),"factor",rep("numeric",15))
data<-read.csv("all_seasons.csv", colClasses=col)
## We have to reformat the date variable from a string to a date
## Upon looking at data however, we see that tehre are two formats in data, so we need to split data first
## Then format, and subsequently rejoin them with the same date format
dateLengthLong<-nchar(as.character(data$Date))>8
dateLengthShort<-nchar(as.character(data$Date))<=8
dateLong<-data[dateLengthLong,]
dateShort<-data[dateLengthShort,]
dateShort$Date<-as.Date(dateShort$Date, "%d/%m/%y")
dateLong$Date<-as.Date(dateLong$Date, "%d/%m/%Y")
data<-rbind(dateShort,dateLong)
## Define home and away discipline points (HDP and ADP respectively), 10points for yellow, 25 for red.
data$ADP<-data$AY*10+data$AR*25
data$HDP<-data$HY*10+data$HR*25
## Incomplete dataset, missing half of 12-13 and nothing after that
seasons_wanted<-c("00-01",
"01-02",
"02-03",
"03-04",
"04-05",
"05-06",
"06-07",
"07-08",
"08-09",
"09-10",
"10-11",
"11-12",
"12-13",
"13-14",
"14-15")
selection_row<-data$season %in% seasons_wanted
data<-cbind(data,selection_row)
## Select the relevant seasons, and premier league (E0) only
data<-subset(data,selection_row==TRUE)
## Need to rename since "AS" messes with the SQL syntax if its a variable name.
data<-rename(data,c("AS"="AwayShots", "HS"="HomeShots"))
datat<-data[order(data$Date),]
View(datat)
datat<-data[order(data$X),]
View(datat)
col<-c("integer",rep("character",4),rep("numeric",2),"factor",rep("numeric",15))
data<-read.csv("all_seasons.csv", colClasses=col)
col<-c("int",rep("character",4),rep("numeric",2),"factor",rep("numeric",15))
data<-read.csv("all_seasons.csv", colClasses=col)
col<-c("numeric",rep("character",4),rep("numeric",2),"factor",rep("numeric",15))
data<-read.csv("all_seasons.csv", colClasses=col)
data<-read.csv("games_clean.csv")
col<-c("integer",rep("character",4),rep("numeric",2),"factor",rep("numeric",15))
data<-read.csv("all_seasons.csv", colClasses=col)
setwd("C:/Users/dracovich/Desktop/Data Science/Create data products")
col<-c("integer",rep("character",4),rep("numeric",2),"factor",rep("numeric",15))
data<-read.csv("all_seasons.csv", colClasses=col)
col<-c("factor",rep("character",4),rep("numeric",2),"factor",rep("numeric",15))
data<-read.csv("all_seasons.csv", colClasses=col)
library(zoo)
library(sqldf)
library(plyr)
library(reshape2)
library(ggplot2)
## Load the cleanup functions
source(file="teamCleanup.R")
source(file="teamMerge.R")
source(file="teamStanding.R")
source(file="tableStanding.R")
## Download and clean data, only if this is first time running
## source("data-cleaning.R")
## Load the edited file and define the colClasses
col<-c("factor",rep("character",4),rep("numeric",2),"factor",rep("numeric",15))
data<-read.csv("all_seasons.csv", colClasses=col)
## We have to reformat the date variable from a string to a date
## Upon looking at data however, we see that tehre are two formats in data, so we need to split data first
## Then format, and subsequently rejoin them with the same date format
dateLengthLong<-nchar(as.character(data$Date))>8
dateLengthShort<-nchar(as.character(data$Date))<=8
dateLong<-data[dateLengthLong,]
dateShort<-data[dateLengthShort,]
dateShort$Date<-as.Date(dateShort$Date, "%d/%m/%y")
dateLong$Date<-as.Date(dateLong$Date, "%d/%m/%Y")
data<-rbind(dateShort,dateLong)
## Define home and away discipline points (HDP and ADP respectively), 10points for yellow, 25 for red.
data$ADP<-data$AY*10+data$AR*25
data$HDP<-data$HY*10+data$HR*25
## Incomplete dataset, missing half of 12-13 and nothing after that
seasons_wanted<-c("00-01",
"01-02",
"02-03",
"03-04",
"04-05",
"05-06",
"06-07",
"07-08",
"08-09",
"09-10",
"10-11",
"11-12",
"12-13",
"13-14",
"14-15")
selection_row<-data$season %in% seasons_wanted
data<-cbind(data,selection_row)
## Select the relevant seasons, and premier league (E0) only
data<-subset(data,selection_row==TRUE)
## Need to rename since "AS" messes with the SQL syntax if its a variable name.
data<-rename(data,c("AS"="AwayShots", "HS"="HomeShots"))
data<-data[order(data$Date),]
## We cycle through all games in all seasons, and create a rolling mean of the previous
## 3 games for all variables, in order to get predictive variables.
for(k in seasons_wanted){
season_subset<-subset(data,season==k)
teams<-unique(season_subset$HomeTeam)
for (i in teams){
team_subset<-subset(season_subset,(HomeTeam==i | AwayTeam==i))
## Run the cleanup on data for team i
team_cleaned<-teamCleanup(i,team_subset)
## If it's the first team, initiate the data-frame, if not just append it
if(i==teams[1]){
combined<-team_cleaned
} else {
combined<-rbind(combined,team_cleaned)
}
}
cleanSeason<-season_subset[c(1,5,6,11)]
## Removing the first 5 games again (since they dont hvae rolling 5 data)
combinedClean<-as.data.frame(combined[complete.cases(combined$mGoals),])
## Calculate the standing of each team before each game measured (using previously defined functions)
indTeamStanding<-as.data.frame(apply(combinedClean[,c("season","Date","team")],1,function(x) teamStanding(x[1],x[2],x[3])))
names(indTeamStanding)[1]<-"standing"
combinedFinal<-cbind(combinedClean,indTeamStanding)
if(k==seasons_wanted[1]){
totalCombined<-combinedFinal
} else {
totalCombined<-rbind(totalCombined,combinedFinal)
}
}
View(totalCombined)
managers<-read.csv2("managers.csv",strip.white=TRUE)
managers$FromDate<-as.Date(managers$From, "%d-%m-%Y")
managers$ToDate<-as.Date(managers$To, "%d-%m-%Y")
## Merge managers onto the timestamps using SQL (not sure how easy this would be to do with R-code merging)
withManagers<- sqldf("select  distinct
g.*,
m.Manager,
1 as count
from     totalCombined as g
left join
managers as m
on m.Team=g.team
where g.Date<=m.ToDate   AND
g.Date>m.FromDate")
View(withManagers)
saveRDS(withManagers, file="withManagers.RDS")
shiny::runApp('shiny')
shiny::runApp('shiny')
